#include <stdio.h>
#include <stdlib.h>

struct node
{
    int info;
    struct node *link;
};
struct node *addatbeg(struct node *start,int data)
{

    struct node *tmp;
    tmp=(struct node *)malloc(sizeof(struct node));
    tmp->info=data;
    tmp->link=start;
    start=tmp;
    return start;
};
struct node *create_list(struct node *start)
{

    int i,n,data;
    printf("Enter the numbe of the nodes ");
    scanf("%d",&n);
    start= NULL;
    printf("Enter the data");
    scanf("%d",&data);
    start=addatbeg(start,data);
    for(i=1;i<n;i++)
    {
        printf("enter the data ");
        scanf("%d",&data);
        start=addatbeg(start,data);

    }
    return start;

};

void count(struct node *start)
{

    struct node *p;
    int count=0;

    p=start;
    while(p!=NULL)
    {
        p=p->link;
        count =count+1;
    }
    printf(" %d\n",count);
}
void search(struct node *start,int item)
{
    struct node *p=start;
    int pos=1;
    while(p!=NULL)
    {
        if(p->info==item)
        {
            printf("the data is postiom %d",pos);
            return;
        }
        p=p->link;
        pos++;


    }
    printf("NOT found");
}

struct node *end(struct node *start,int data)
{
    struct node *p,*tmp;
    tmp=(struct node *)malloc(sizeof(struct node));
    tmp->info=data;
    p=start;
    while(p->link!=NULL)
        p=p->link;
            p->link=tmp;
            tmp->link=NULL;
                return start;

};
struct node *afternode(struct node *start,int data,int item)
{
    struct node *p,*tmp;
    p=start;
    while(p!=NULL)
    {
        if(p->info==item)
        {
            tmp=(struct node *)malloc(sizeof(struct node));
            tmp->info=data;
            tmp->link=p->link;
            p->link==tmp;
            return start;

        }
        p=p->link;
        printf("NOT Present");
    }
return start;
};
struct node *before(struct node *start,int data,int item)
{
    struct node *tmp,*p;
    if(start=NULL)
    {
        printf("EMPTY LIST");
        return;
    }
    if(item==start->info)
    {
     tmp=(struct node *)malloc(sizeof(struct node));
     tmp->info=data;
     tmp->link=start;
     start=tmp;
    }
    p=start;
    while(p!=NULL)
    {

        if(p->info==item)
        {
            tmp=(struct node *)malloc(sizeof(struct node));
            tmp->info=data;
            tmp->link=p->link;
            p->link=tmp;
        }
        p=p->link;
    }
    return start;
};
struct node *atpos(struct node *start,int data,int pos)
{
    struct node *tmp,*p;
    int i;
    tmp=(struct node *)malloc(sizeof(struct node));
    tmp->info=data;
    if(pos==1)
    {
        tmp->link=start;
        start=tmp;
        return start;
    }
    p=start;
    for(i=0;i<pos-1;i++)
    {
        p=p->link;
        if(p=NULL)
        {
            printf("Major exceed");
        }
        else
            tmp->link=p->link;
            p->link=tmp;
    }
    return start;
};
struct node *del(struct node *start,int data)
{
    struct node *tmp,*p;
    if(start=NULL)
    {
        printf("LIst is EMPTY");
        return start;

    }
    if(start->info==data)
    {
        tmp=start;
        start=start->link;
        free(tmp);
        return start;
    }
    p=start;
    while(p->link!=NULL)
    {
        if(data==p->info)
        {
            tmp=p->link;
            p->link=tmp->link;
            free(tmp);
            return start;
        }
        p=p->link;
    }
    printf("NOT found");
    return start;
};
struct node *reverse(struct node *start)
{
    struct node *prev,*ptr,*next;
    prev=NULL;
    ptr=start;
    while(ptr!=NULL)
    {

        next =ptr->link;
        ptr->link=prev;
        prev = ptr;
        ptr= next;
    }
    start =prev;
    return start;

};
main()
{

    struct node *start=NULL;
        int choice,data,item,pos;
        while(1)
        {

            printf("1. Create list \n");
            printf("2. Display \n");
            printf("3. Count\n");
            printf("4. Search\n");
            printf("5. add to empty list/add at beginning\n");
            printf("6.add at end\n");
            printf("7.Add after node\n");
            printf("8. add before node \n");
            printf("9.add at position\n");
            printf("10. Delete \n");
            printf("11. REverse \n");
            printf("12. Quit \n \n");
            printf("ENTER YOUR CHOICE  ");
            scanf("%d",&choice);
            switch(choice)
            {
            case 1:
                start =create_list(start);
                break;
                case 2:
                display(start);
                break;
                case 3:
                    count(start);
                    break;
                case 4 :
                    printf("enter the elemets to be searched");
                    scanf("%d",&data);
                    search(start,data );
                    break;
                case 5:
                    printf("Enter the elements to be inserted");
                    scanf("%d",&data);
                    start =addatbeg(start,data);
                    break;
                case 6:
                    printf("ENter The elements to be inserted");
                    scanf("%d",&data);
                    start=end(start,data);
                    break;
                case 7:
                    printf("Enter the element to be isered");
                    scanf("%d",&data);
                    scanf("%d",&item);
                    start=afternode(start ,data,item);
                    break;
                case 8:
                     printf("Enter the element to be isered");
                    scanf("%d",&data);
                    printf("Enter the elemnts before which to be inserted");

                    scanf("%d",&item);
                    start=before(start ,data,item);
                    break;
                case 9:
                     printf("Enter the element to be isered");
                    scanf("%d",&data);
                    printf("Enter the position which to be inserted")
                    ;
                    scanf("%d",&pos);
                    start=atpos(start ,data,pos);
                    break;
                case 10:
                    printf("enter the elemnts to be deleted");
                    scanf ("%d",&data);
                    start=del(start,data);
                    break;
                case 11:
                    start=reverse (start)
;
break;
case 12:

exit(1);
default:
printf("yydhh");            }
        }
}



